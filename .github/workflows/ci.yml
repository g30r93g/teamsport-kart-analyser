name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  quality:
    if: github.event_name != 'pull_request' || !github.event.pull_request.draft
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Pin pnpm store directory
        run: pnpm config set store-dir .pnpm-store

      - name: Cache pnpm store and Next.js build artifacts
        uses: actions/cache@v4
        with:
          path: |
            .pnpm-store
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm lint

      - name: Type check
        run: pnpm exec tsc --noEmit

      - name: Build
        run: pnpm build

  dependency-health:
    if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main' && !github.event.pull_request.draft
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Pin pnpm store directory
        run: pnpm config set store-dir .pnpm-store

      - name: Cache pnpm store and Next.js build artifacts
        uses: actions/cache@v4
        with:
          path: |
            .pnpm-store
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run pnpm audit
        run: pnpm audit --audit-level=moderate

      - name: Fail on major version drift
        run: |
          pnpm outdated --json > outdated.json || true
          node <<'NODE'
          const fs = require('node:fs')

          const content = fs.readFileSync('outdated.json', 'utf8').trim()
          if (!content) {
            console.log('No outdated dependencies reported.')
            process.exit(0)
          }

          const report = JSON.parse(content)
          const entries = Object.entries(report)
          const majorLaggers = entries.filter(([_, info]) => {
            const getMajor = (value) => {
              if (!value) return NaN
              const match = String(value).match(/^(\d+)/)
              return match ? Number(match[1]) : NaN
            }
            const current = getMajor(info.current)
            const latest = getMajor(info.latest)
            if (Number.isNaN(current) || Number.isNaN(latest)) {
              return false
            }
            return latest - current >= 1
          })

          if (majorLaggers.length) {
            console.error('\nMajor updates required:')
            for (const [name, info] of majorLaggers) {
              console.error(`- ${name}: ${info.current} -> ${info.latest}`)
            }
            console.error('\nRun `pnpm update <pkg>` to plan upgrades or add exceptions if intentional.')
            process.exit(1)
          }

          console.log('No major version drift detected.')
          NODE
